<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
        <!-- 超过时间限制是否回收 -->
        <!--<property name="removeAbandoned" value="${removeAbandoned}" />-->
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <!-- <property name="validationQuery" value="${validationQuery}" />   -->
        <!-- 申请连接的时候检测 -->
        <!--<property name="testWhileIdle" value="${testWhileIdle}" />  -->
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <!--<property name="testOnBorrow" value="${testOnBorrow}" />  -->
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <!--<property name="testOnReturn" value="${testOnReturn}" />  -->
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <!--<property name="poolPreparedStatements" value="${poolPreparedStatements}" />       -->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有:监控统计用的filter:stat  日志用的filter:log4j  防御SQL注入的filter:wall -->
        <!--   <property name="filters" value="${filters}" />-->
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
        <!-- 监控数据库 -->
        <property name="filters" value="mergeStat"/>
        <!--手动提交-->
        <property name="defaultAutoCommit" value="${defaultAutoCommit}"/>
    </bean>

    <!-- Spring整合Mybatis-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="typeAliasesPackage" value="com.waves.model" />
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:com/waves/mapper/xml/*.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSession" />
        <property name="basePackage" value="com.waves.mapper"/>
    </bean>



    <!-- 配置切面 -->
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.waves.service.serviceImpl.*.*(..))"/>
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>
    </aop:config>

</beans>